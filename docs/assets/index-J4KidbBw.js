(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))o(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const c of n.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class l{constructor(t,e){this._value=e?.initial||!1,document.getElementById(t)?.addEventListener("click",this.changeValue.bind(this))}value(){return this._value}changeValue(t){this._value=t.target.checked}}function u(r,t){const e=new l(r,t);return e.value.bind(e)}class d{constructor(t,e){this._value=0,this.valueInput=null,this.minusButton=null,this.plusButton=null,this.minValue=0,this.maxValue=0,this._value=e.initial,this.minValue=e.min,this.maxValue=e.max,this.valueInput=document.getElementById(`${t}-val`),this.minusButton=document.getElementById(`${t}-minus`),this.plusButton=document.getElementById(`${t}-plus`),this.valueInput?.addEventListener("change",this.setVal.bind(this)),this.minusButton?.addEventListener("click",this.minusVal.bind(this)),this.plusButton?.addEventListener("click",this.plusVal.bind(this)),this.updateValueInputs()}value(){return this._value}setVal(t){const e=this.parseValue(t.target);this._value=e!==null?e:this._value,this.updateValueInputs()}minusVal(){this._value--,this.updateValueInputs()}plusVal(){this._value++,this.updateValueInputs()}updateValueInputs(){this._value=Math.max(this.minValue,Math.min(this.maxValue,this._value)),this.valueInput&&(this.valueInput.value=this._value.toString())}parseValue(t){if(!(t instanceof HTMLInputElement))return console.error("Invalid target for input."),null;const e=parseInt(t.value.trim(),10);return isNaN(e)?(console.error("Value must be a valid integer."),null):e}}function a(r,t){const e=new d(r,t);return e.value.bind(e)}class h{constructor(t){this.clickHz=1e3,this.offbeatHz=750,this.oscillatorType="square",this.nextClickTime=0,this.nextClickSubdivision=0,this.isPlaying=!1,this.tempo=60,this.scheduleLookahead=25,this.scheduleInterval=25,this.countOffAllowance=100,this.enabled=u("click-enabled"),this.bpm=a("bpm",{initial:60,min:15,max:300}),this.latency=a("latency",{initial:-75,min:-500,max:500}),this.countOff=a("count-off",{initial:0,min:0,max:8}),this.volume=a("click-volume",{initial:1,min:0,max:10}),this.subdivisions=a("subdivisions",{initial:1,min:1,max:16}),this.scheduler=()=>{for(;this.nextClickTime<this.audioContext.currentTime+this.scheduleLookahead/1e3;){const e=this.nextClickSubdivision%this.subdivisions()===0?this.clickHz:this.offbeatHz;this.createClickSound(this.nextClickTime,e),this.nextClickTime+=this.tempo,this.nextClickSubdivision++}this.isPlaying&&setTimeout(this.scheduler,this.scheduleInterval)},this.audioContext=t}getPlaybackStartTime(t,e=1){const o=this.latency()/e;let i=t-o/1e3;return this.countOff()>0&&(i+=this.countOffAllowance/e/1e3),i}countOffMs(){return!this.enabled()||this.countOff()<=0?0:this.countOff()/this.bpm()*60*1e3-this.countOffAllowance}click(t,e,o,i){}createClickSound(t,e){const o=this.audioContext.createOscillator(),i=this.audioContext.createGain();o.type=this.oscillatorType,o.frequency.setValueAtTime(e,t),i.gain.setValueAtTime(0,t),i.gain.linearRampToValueAtTime(this.volume(),t+.001),i.gain.exponentialRampToValueAtTime(.001,t+.05),o.connect(i),i.connect(this.audioContext.destination),o.start(t),o.stop(t+.05)}start(t=this.audioContext.currentTime,e){const o=this.isPlaying?this.tempo:0;this.isPlaying&&this.stop(),this.tempo=60/(this.bpm()*this.subdivisions()*e),setTimeout(()=>{this.isPlaying=!0,this.nextClickTime=t,this.nextClickSubdivision=0,this.scheduler()},o)}stop(){this.isPlaying=!1}}class p{constructor(t){this.sourceNode=null,this.isPlaying=!1,this.playbackRate=1,this.onEndedCallback=null,this.startTime=0,this.audioContext=t,this.gainNode=t.createGain(),this.gainNode.connect(t.destination)}play(t,e=1,o){this.stop(),this.sourceNode=this.audioContext.createBufferSource(),this.sourceNode.buffer=t,this.sourceNode.playbackRate.value=e,this.sourceNode.connect(this.gainNode),this.playbackRate=e,this.onEndedCallback=o||null,this.sourceNode.onended=()=>{this.isPlaying=!1,this.onEndedCallback&&this.onEndedCallback()};const i=this.audioContext.currentTime;return this.startTime=i,this.sourceNode.start(i),this.isPlaying=!0,i}stop(){this.sourceNode&&this.isPlaying&&(this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null,this.isPlaying=!1)}}var s=(r=>(r.UNKNOWN="unknown",r.RECORDING="recording",r.STOPPED="stopped",r.PLAYING="playing",r))(s||{});class m{constructor(t){this.stream=null,this.sourceNode=null,this.recordingNode=null,this.state=s.UNKNOWN,this.recordedBuffer=null,this.recordingData=[],this.sampleRate=44100,this.maxRecordingLength=300,this.audioContext=t,this.sampleRate=t.sampleRate}async initialize(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!1,noiseSuppression:!1,autoGainControl:!1,sampleRate:this.sampleRate}}),this.sourceNode=this.audioContext.createMediaStreamSource(this.stream);try{await this.audioContext.audioWorklet.addModule(this.getRecorderWorkletCode()),this.recordingNode=new AudioWorkletNode(this.audioContext,"recorder-worklet"),this.setupWorkletRecording()}catch{console.warn("AudioWorklet not supported, falling back to ScriptProcessorNode"),this.setupScriptProcessorRecording()}this.state=s.STOPPED}catch(t){throw console.error("Error initializing Web Audio recorder:",t),t}}getRecorderWorkletCode(){const t=`
      class RecorderWorklet extends AudioWorkletProcessor {
        constructor() {
          super();
          this.isRecording = false;
          this.port.onmessage = (event) => {
            if (event.data.command === "start") {
              this.isRecording = true;
            } else if (event.data.command === "stop") {
              this.isRecording = false;
            }
          };
        }

        process(inputs, outputs) {
          if (this.isRecording && inputs[0] && inputs[0][0]) {
            // Send audio data to main thread
            this.port.postMessage({
              type: "audiodata",
              audioData: inputs[0][0].slice() // Copy the audio data
            });
          }
          return true;
        }
      }
      registerProcessor("recorder-worklet", RecorderWorklet);
    `,e=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(e)}setupWorkletRecording(){this.recordingNode&&(this.recordingNode.port.onmessage=t=>{t.data.type==="audiodata"&&(this.recordingData.push(new Float32Array(t.data.audioData)),this.recordingData.length>this.maxRecordingLength*this.sampleRate/128&&(console.warn("Maximum recording length reached"),this.stop()))})}setupScriptProcessorRecording(){const e=this.audioContext.createScriptProcessor(4096,1,1);e.onaudioprocess=o=>{if(this.state===s.RECORDING){const i=o.inputBuffer.getChannelData(0);this.recordingData.push(new Float32Array(i)),this.recordingData.length>this.maxRecordingLength*this.sampleRate/4096&&(console.warn("Maximum recording length reached"),this.stop())}},this.recordingNode=e}start(){if(this.state!==s.STOPPED){console.error("Recorder is not in a stopped state, cannot start recording");return}try{this.recordingData=[],this.sourceNode&&this.recordingNode&&(this.sourceNode.connect(this.recordingNode),this.recordingNode instanceof ScriptProcessorNode&&this.recordingNode.connect(this.audioContext.destination)),this.state=s.RECORDING,this.recordingNode instanceof AudioWorkletNode&&this.recordingNode.port.postMessage({command:"start"})}catch(t){console.error("Error starting recording:",t)}}stop(){if(this.state!==s.RECORDING){console.error("Recorder is not in a recording state, cannot stop recording");return}try{this.state=s.STOPPED,this.recordingNode instanceof AudioWorkletNode&&this.recordingNode.port.postMessage({command:"stop"}),this.sourceNode&&this.recordingNode&&(this.sourceNode.disconnect(this.recordingNode),this.recordingNode instanceof ScriptProcessorNode&&this.recordingNode.disconnect()),this.processRecordedData()}catch(t){console.error("Error stopping recording:",t)}}processRecordedData(){if(this.recordingData.length===0){console.warn("No audio data recorded");return}const t=this.recordingData.reduce((i,n)=>i+n.length,0);this.recordedBuffer=this.audioContext.createBuffer(1,t,this.sampleRate);const e=this.recordedBuffer.getChannelData(0);let o=0;for(const i of this.recordingData)e.set(i,o),o+=i.length}getAudioBuffer(){return this.recordedBuffer}reset(){if(this.state===s.RECORDING&&this.stop(),this.stream&&this.sourceNode)try{this.sourceNode=this.audioContext.createMediaStreamSource(this.stream),this.recordingNode instanceof AudioWorkletNode?(this.recordingNode=new AudioWorkletNode(this.audioContext,"recorder-worklet"),this.setupWorkletRecording()):this.setupScriptProcessorRecording(),this.state=s.STOPPED}catch(t){console.error("Error resetting recorder:",t)}}}class f{constructor(t,e){this.numerator=1,this.denominator=4,this._value=this.numerator/this.denominator,this.numerValueInput=null,this.denomValueInput=null,this.minusButtom=null,this.plusButton=null,this.numerator=e.initNum,this.denominator=e.initDen,this.numerValueInput=document.getElementById(`${t}-numer`),this.denomValueInput=document.getElementById(`${t}-denom`),this.minusButtom=document.getElementById(`${t}-minus`),this.plusButton=document.getElementById(`${t}-plus`),this.numerValueInput?.addEventListener("change",this.setNumerator.bind(this)),this.denomValueInput?.addEventListener("change",this.setDenominator.bind(this)),this.minusButtom?.addEventListener("click",this.minus.bind(this)),this.plusButton?.addEventListener("click",this.plus.bind(this)),e.arrowKeys&&document.addEventListener("keydown",o=>{o.key==="ArrowRight"?(o.preventDefault(),this.plus()):o.key==="ArrowLeft"&&(o.preventDefault(),this.minus())}),this.updateValueInput()}value(){return this._value}updateValueInput(){this.numerValueInput&&(this.numerValueInput.value=this.numerator.toString()),this.denomValueInput&&(this.denomValueInput.value=this.denominator.toString()),this._value=this.numerator/this.denominator}setNumerator(t){this.numerator=this.parseValue(t.target)||this.numerator,this.updateValueInput()}setDenominator(t){this.denominator=this.parseValue(t.target)||this.denominator,this.updateValueInput()}parseValue(t){if(!(t instanceof HTMLInputElement))return 0;const e=parseInt(t.value.trim(),10);return isNaN(e)||e<=0?0:e}minus(){this.numerator===1?this.denominator++:this.numerator--,this.updateValueInput()}plus(){this.denominator===1?this.numerator++:this.denominator--,this.updateValueInput()}}function g(r,t){const e=new f(r,t);return e.value.bind(e)}class y{constructor(){this.recordIcon=document.getElementById("record"),this.recordingIcon=document.getElementById("recording"),this.playIcon=document.getElementById("play"),this.playingIcon=document.getElementById("playing"),this.state=s.STOPPED,this.nextState=s.RECORDING,this.showControls([this.recordIcon])}initializeEventListeners(t){this.recordIcon?.addEventListener("click",t.record.bind(this)),this.recordingIcon?.addEventListener("click",t.stopRecording.bind(this)),this.playIcon?.addEventListener("click",t.play.bind(this)),this.playingIcon?.addEventListener("click",t.stopPlaying.bind(this)),document.addEventListener("keydown",e=>{e.key===" "&&(e.preventDefault(),this.state===s.RECORDING?t.stopRecording():this.state===s.PLAYING?t.stopPlaying():this.state===s.STOPPED&&(this.nextState===s.RECORDING?t.record():this.nextState===s.PLAYING&&t.play()))})}markRecording(){this.setState(s.RECORDING)}markPlaying(){this.setState(s.PLAYING)}markStopped(){this.setState(s.STOPPED)}setState(t){t===s.RECORDING?(this.showControls([this.recordingIcon]),this.state=s.RECORDING,this.nextState=s.STOPPED):t===s.STOPPED?(this.nextState=this.state===s.RECORDING?s.PLAYING:s.RECORDING,this.showControls([this.playIcon,this.recordIcon]),this.state=s.STOPPED):t===s.PLAYING&&(this.showControls([this.playingIcon]),this.state=s.PLAYING,this.nextState=s.STOPPED)}showControls(t){[this.recordIcon,this.recordingIcon,this.playIcon,this.playingIcon].forEach(e=>{e&&(e.style.display=t.includes(e)?"inline-block":"none")})}}class N{constructor(){this.audioContext=new AudioContext,this.recorder=new m(this.audioContext),this.player=new p(this.audioContext),this.metronome=new h(this.audioContext),this.playbackSpeed=g("playback",{initNum:1,initDen:4,arrowKeys:!0}),this.playRecordControls=new y,this.playRecordControls.initializeEventListeners({record:this.record.bind(this),stopRecording:this.stopRecording.bind(this),play:this.play.bind(this),stopPlaying:this.stopPlaying.bind(this)}),this.recorder.initialize().catch(t=>{console.error("Failed to initialize recorder:",t)})}async record(){try{if(this.audioContext.state==="suspended"&&await this.audioContext.resume(),await this.recorder.reset(),this.metronome.stop(),await new Promise(t=>setTimeout(t,100)),this.metronome.enabled()){const t=this.audioContext.currentTime;this.metronome.start(t,1)}setTimeout(()=>this.recorder.start(),this.metronome.countOffMs()),this.playRecordControls.markRecording()}catch(t){console.error("Error starting recording:",t)}}stopRecording(){this.metronome.stop(),this.recorder.stop(),this.playRecordControls.markStopped()}play(){const t=this.recorder.getAudioBuffer();if(!t){console.error("No audio buffer available for playback");return}this.metronome.stop();const e=this.player.play(t,this.playbackSpeed(),()=>{this.stopPlaying()});if(this.metronome.enabled()){const o=this.metronome.getPlaybackStartTime(e,this.playbackSpeed());this.metronome.start(o,this.playbackSpeed())}this.playRecordControls.markPlaying()}stopPlaying(){this.player.stop(),this.metronome.stop(),this.playRecordControls.markStopped()}}new N;
